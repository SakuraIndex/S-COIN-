name: Generate long-term charts (S-COIN+ 1d/7d/1m/1y + stats)

on:
  workflow_dispatch:
  schedule:
    - cron: '15 1 * * *'   # 毎日 10:15 JST

permissions: { contents: write }

concurrency:
  group: long-charts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, persist-credentials: true }

      - name: Resolve
        id: resolve
        run: |
          echo "INDEX_KEY=scoin_plus" | tee -a "$GITHUB_ENV"
          echo "market_tz=Asia/Tokyo"       >> "$GITHUB_OUTPUT"
          echo "session_start=09:00"        >> "$GITHUB_OUTPUT"
          echo "session_end=15:30"          >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pandas numpy matplotlib; fi

      - run: rm -rf scripts/__pycache__ || true

      - name: Generate long-term charts
        env:
          INDEX_KEY: ${{ env.INDEX_KEY }}
          MARKET_TZ: ${{ steps.resolve.outputs.market_tz }}
          SESSION_START: ${{ steps.resolve.outputs.session_start }}
          SESSION_END: ${{ steps.resolve.outputs.session_end }}
        run: |
          python scripts/long_charts.py
          ls -lah docs/outputs || true

      - name: Normalize legacy filenames
        run: |
          OUTDIR="docs/outputs"; shopt -s nullglob
          for f in "$OUTDIR"/s_coin__* "$OUTDIR"/s_coin_*; do
            [ -e "$f" ] || continue
            base="$(basename "$f")"; new="$OUTDIR/${base/s_coin__/scoin_plus_}"; new="${new/s_coin_/scoin_plus_}"
            [ "$f" = "$new" ] || mv -f "$f" "$new"
          done

      - name: Sanity check - prefix
        env: { INDEX_KEY: ${{ env.INDEX_KEY }} }
        run: |
          OUTDIR="docs/outputs"; shopt -s nullglob; err=0
          for f in "$OUTDIR"/*; do
            b="$(basename "$f")"; case "$b" in README.md|_last_run.txt) continue;; esac
            [[ "$b" == "${INDEX_KEY}_"* ]] || { echo "❌ prefix mismatch: $b"; err=1; }
          done
          [ $err -eq 0 ] || exit 1
          echo "
