name: "S-COIN+ • intraday + publish (JST 09:00–15:30)"

on:
  workflow_dispatch:
  schedule:
    - cron: "35 2 * * 1-5"   # JST 11:35
    - cron: "35 6 * * 1-5"   # JST 15:35

permissions:
  contents: write

concurrency:
  group: scoinp-intraday-${{ github.ref }}
  cancel-in-progress: false

env:
  INDEX_KEY: S_COIN_PLUS
  LABEL: "S-COIN+"
  CSV: docs/outputs/scoin_plus_intraday.csv
  DT_COL: "Datetime"
  BASIS_DEFAULT: prev_close
  VALUE_TYPE_DEFAULT: auto

  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/S-COIN+
  PUBLISH_TOKEN: ${{ secrets.SITE_PAT || secrets.SITE_PUBLISH_TOKEN || secrets.GITHUB_TOKEN }}

  OUT_DIR: docs/outputs
  OUT_JSON: docs/outputs/scoinp_stats.json
  OUT_TEXT: docs/outputs/scoinp_post_intraday.txt
  SNAPSHOT_PNG: docs/outputs/scoinp_intraday.png
  SNAPSHOT_AM_PNG: docs/outputs/scoinp_intraday_am.png

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          python -m pip install pandas matplotlib yfinance pytz

      - name: Skip when market closed (JST)
        run: |
          H=$(TZ=Asia/Tokyo date +%H%M)
          if [ "$H" -lt 0900 ] || [ "$H" -gt 1530 ]; then
            echo "Market closed — skip."
            exit 0
          fi

      - name: Build intraday CSV (JP equities)
        run: |
          if [ -f tickers_scoinp.txt ]; then
            echo "Building intraday CSV from tickers_scoinp.txt"
            mkdir -p docs/outputs
            {
              echo "import sys, pandas as pd, datetime as dt, pytz, yfinance as yf"
              echo "csv_path = 'docs/outputs/scoin_plus_intraday.csv'"
              echo "with open('tickers_scoinp.txt') as f:"
              echo "    tickers = [t.strip() for t in f if t.strip() and not t.startswith('#')]"
              echo "jst = pytz.timezone('Asia/Tokyo')"
              echo "today = dt.datetime.now(jst).date()"
              echo "start = jst.localize(dt.datetime(today.year, today.month, today.day, 9, 0))"
              echo "end   = jst.localize(dt.datetime(today.year, today.month, today.day, 15, 30))"
              echo "frames = []"
              echo "for t in tickers:"
              echo "    try:"
              echo "        df = yf.download(t, start=start, end=end, interval='1m', progress=False, auto_adjust=True)"
              echo "    except Exception as e:"
              echo "        print('download failed', t, e); continue"
              echo "    if df is None or df.empty: continue"
              echo "    df = df[['Close']].rename(columns={'Close': t})"
              echo "    frames.append(df)"
              echo "if not frames: sys.exit(0)"
              echo "px = pd.concat(frames, axis=1).dropna(how='all')"
              echo "px.index = px.index.tz_convert(jst)"
              echo "px['Datetime'] = px.index"
              echo "px['Index'] = px[[c for c in px.columns if c in tickers]].mean(axis=1, skipna=True)"
              echo "px[['Datetime','Index']].to_csv(csv_path, index=False)"
              echo "print('CSV written:', csv_path)"
            } > build_csv.py
            python build_csv.py
          else
            echo "tickers_scoinp.txt not found — using existing CSV"
          fi

      - name: Verify inputs & script
        run: |
          set -e
          test -f "${CSV}" || (echo "Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || (echo "Missing script: scripts/make_intraday_post.py" && exit 1)
          mkdir -p "${OUT_DIR}"

      - name: Decide AM/PM variant
        env:
          RUN_SCHEDULE: ${{ github.event.schedule || '' }}
        run: |
          if [ "${RUN_SCHEDULE}" = "35 2 * * 1-5" ]; then
            echo "PUBLISH_VARIANT=am" >> "$GITHUB_ENV"
          else
            echo "PUBLISH_VARIANT=pm" >> "$GITHUB_ENV"
          fi

      - name: Generate intraday snapshot (with legacy fallback)
        run: |
          # decide output png
          SNAP="${SNAPSHOT_PNG}"
          if [ "${PUBLISH_VARIANT:-pm}" = "am" ]; then SNAP="${SNAPSHOT_AM_PNG}"; fi

          echo "Try: extended CLI"
          set +e
          python scripts/make_intraday_post.py \
            --index-key "${INDEX_KEY}" \
            --csv "${CSV}" \
            --out-json "${OUT_JSON}" \
            --out-text "${OUT_TEXT}" \
            --snapshot-png "${SNAP}" \
            --session-start 09:00 \
            --session-end 15:30 \
            --day-anchor 09:00 \
            --basis prev_close \
            --label "${LABEL}" \
            --dt-col "${DT_COL}" \
            --value-type auto
          rc=$?
          set -e

          if [ $rc -ne 0 ]; then
            echo "[fallback] legacy CLI"
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --snapshot-png "${SNAP}" \
              --session-start 09:00 \
              --session-end 15:30 \
              --day-anchor 09:00 \
              --basis prev_close
          fi

          ls -l "${OUT_JSON}" "${OUT_TEXT}" "${SNAP}" || true

      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy into site tree
        run: |
          set -e
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}" "${dst}/stats.json"
          cp -f "${OUT_TEXT}" "${dst}/post_intraday.txt"
          if   [ -f "${SNAPSHOT_PNG}"    ]; then cp -f "${SNAPSHOT_PNG}"    "${dst}/intraday.png"
          elif [ -f "${SNAPSHOT_AM_PNG}" ]; then cp -f "${SNAPSHOT_AM_PNG}" "${dst}/intraday.png"
          fi
          TZ=Asia/Tokyo date '+%Y/%m/%d %H:%M' > "${dst}/last_run.txt"
          ls -l "${dst}"

      - name: Commit & push site charts
        working-directory: site
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes for site."
          else
            git commit -m "Update S-COIN+ intraday ($(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi
