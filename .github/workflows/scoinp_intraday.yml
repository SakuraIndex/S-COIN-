name: "S-COIN+ • intraday + publish (JST 09:00-15:30)"

on:
  workflow_dispatch:
  schedule:
    - cron: "35 2 * * 1-5"   # JST 11:35
    - cron: "35 6 * * 1-5"   # JST 15:35

permissions:
  contents: write

concurrency:
  group: scoinp-intraday-${{ github.ref }}
  cancel-in-progress: false

env:
  INDEX_KEY: S_COIN_PLUS
  LABEL: "S-COIN+"
  CSV: docs/outputs/scoin_plus_intraday.csv
  DT_COL: "Datetime"
  BASIS_DEFAULT: prev_close
  VALUE_TYPE_DEFAULT: auto

  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/S-COIN+
  PUBLISH_TOKEN: ${{ secrets.SITE_PAT || secrets.SITE_PUBLISH_TOKEN || secrets.GITHUB_TOKEN }}

  OUT_DIR: docs/outputs
  OUT_JSON: docs/outputs/scoinp_stats.json
  OUT_TEXT: docs/outputs/scoinp_post_intraday.txt
  SNAPSHOT_PNG: docs/outputs/scoinp_intraday.png
  SNAPSHOT_AM_PNG: docs/outputs/scoinp_intraday_am.png

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure deps (pandas/matplotlib/pytz/yfinance)
        shell: bash
        run: |
          set -euo pipefail
          python -V
          python -m pip install -U pip
          for pkg in pandas matplotlib pytz yfinance; do
            python -m pip install -U --no-cache-dir "$pkg" || python -m pip install -U "$pkg"
          done

      - name: Skip when market closed (JST)
        shell: bash
        run: |
          H=$(TZ=Asia/Tokyo date +%H%M)
          if [ "$H" -lt 0900 ] || [ "$H" -gt 1530 ]; then
            echo "Market closed — skip."
            exit 0
          fi

      - name: Build intraday CSV (prefer repo script, optional yfinance fallback)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/outputs

          echo "== Try repo script =="
          if [ -f src/scoin_plus_intraday.py ]; then
            python src/scoin_plus_intraday.py \
              --out "${CSV}" \
              --start "09:00" --end "15:30" || true
          fi

          echo "== Freshness check =="
          export P="${CSV}"
          STATUS=$(python -c '
import os, sys, pandas as pd
from datetime import datetime, timedelta
# TZ 準備
try:
    from zoneinfo import ZoneInfo
    JST = ZoneInfo("Asia/Tokyo")
except Exception:
    import pytz
    JST = pytz.timezone("Asia/Tokyo")

p = os.environ.get("P","")
if not p or not os.path.exists(p):
    print("missing"); sys.exit(0)

try:
    df = pd.read_csv(p, parse_dates=["Datetime"])
except Exception:
    print("empty"); sys.exit(0)

if df.empty:
    print("empty"); sys.exit(0)

try:
    if df["Datetime"].dt.tz is None:
        df["Datetime"] = df["Datetime"].dt.tz_localize("Asia/Tokyo", nonexistent="NaT", ambiguous="NaT")
    df["Datetime"] = df["Datetime"].dt.tz_convert("Asia/Tokyo")
except Exception:
    pass

today = datetime.now(JST).date()
df = df[df["Datetime"].dt.date == today]
if df.empty:
    print("no_today"); sys.exit(0)

last = df["Datetime"].max().to_pydatetime()
try:
    last = last.astimezone(JST)
except Exception:
    pass

delta = (datetime.now(JST) - last).total_seconds()
print("ok" if delta <= 5400 else "stale")
' )
          echo "CHECK_CSV_STATUS: ${STATUS}"

          if [ "${STATUS}" != "ok" ] && [ -f tickers_scoinp.txt ]; then
            echo "== yfinance fallback =="
            export P="${CSV}"
            python -c '
import os, sys, pandas as pd, datetime as dt
# yfinance が未導入でもここまで来る想定はないが一応
try:
    import yfinance as yf
except Exception as e:
    print("NO_YF", e); sys.exit(2)

# TZ
try:
    from zoneinfo import ZoneInfo
    JST = ZoneInfo("Asia/Tokyo")
except Exception:
    import pytz
    JST = pytz.timezone("Asia/Tokyo")

csv_path = os.environ.get("P","docs/outputs/scoin_plus_intraday.csv")
if not os.path.exists("tickers_scoinp.txt"):
    print("NO_TICKERS"); sys.exit(2)
tickers = [t.strip() for t in open("tickers_scoinp.txt") if t.strip() and not t.startswith("#")]
if not tickers:
    print("NO_TICKERS"); sys.exit(2)

today = dt.datetime.now(JST).date()
frames = []
for t in tickers:
    try:
        df = yf.download(t, period="5d", interval="1m", prepost=False, auto_adjust=True, threads=False)
    except Exception as e:
        print("download failed", t, e); continue
    if df is None or df.empty: continue
    if df.index.tz is None:
        try:
            import pytz
            df.index = df.index.tz_localize(pytz.UTC)
        except Exception:
            pass
    try:
        df = df.tz_convert(JST)
    except Exception:
        pass
    df = df[df.index.date == today]
    if df.empty: continue
    df = df[["Close"]].rename(columns={"Close": t})
    frames.append(df)

if not frames:
    print("NO_TODAY_DATA"); sys.exit(2)

px = pd.concat(frames, axis=1).sort_index().dropna(how="all")
px["Datetime"] = px.index
cols = [c for c in px.columns if c in tickers]
px["Index"] = px[cols].mean(axis=1, skipna=True)
px[["Datetime","Index"]].to_csv(csv_path, index=False)
print("CSV written:", csv_path, "rows=", len(px))
'
          fi

      - name: Verify inputs & script
        shell: bash
        run: |
          test -f "${CSV}" || (echo "Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || (echo "Missing script: scripts/make_intraday_post.py" && exit 1)
          mkdir -p "${OUT_DIR}"

      - name: Decide AM/PM variant
        env:
          RUN_SCHEDULE: ${{ github.event.schedule || '' }}
        shell: bash
        run: |
          if [ "${RUN_SCHEDULE}" = "35 2 * * 1-5" ]; then
            echo "PUBLISH_VARIANT=am" >> "$GITHUB_ENV"
          else
            echo "PUBLISH_VARIANT=pm" >> "$GITHUB_ENV"
          fi
          echo "Variant=${PUBLISH_VARIANT:-pm}"

      - name: Generate intraday snapshot (extended CLI -> legacy fallback)
        shell: bash
        run: |
          SNAP="${SNAPSHOT_PNG}"
          if [ "${PUBLISH_VARIANT:-pm}" = "am" ]; then SNAP="${SNAPSHOT_AM_PNG}"; fi

          set +e
          python scripts/make_intraday_post.py \
            --index-key "${INDEX_KEY}" \
            --csv "${CSV}" \
            --out-json "${OUT_JSON}" \
            --out-text "${OUT_TEXT}" \
            --snapshot-png "${SNAP}" \
            --session-start 09:00 \
            --session-end 15:30 \
            --day-anchor 09:00 \
            --basis "${BASIS_DEFAULT}" \
            --label "${LABEL}" \
            --dt-col "${DT_COL}" \
            --value-type "${VALUE_TYPE_DEFAULT}"
          rc=$?
          set -e

          if [ $rc -ne 0 ]; then
            echo "[fallback] legacy CLI"
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --snapshot-png "${SNAP}" \
              --session-start 09:00 \
              --session-end 15:30 \
              --day-anchor 09:00 \
              --basis "${BASIS_DEFAULT}"
          fi

          ls -l "${OUT_JSON}" "${OUT_TEXT}" "${SNAP}" || true

      - name: Validate outputs (existence/size)
        shell: bash
        run: |
          SNAP="${SNAPSHOT_PNG}"
          [ "${PUBLISH_VARIANT:-pm}" = "am" ] && SNAP="${SNAPSHOT_AM_PNG}"
          test -s "${OUT_JSON}"
          test -s "${OUT_TEXT}"
          test -s "${SNAP}"
          [ $(stat -c%s "${SNAP}") -ge 8192 ]

      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy into site tree
        shell: bash
        run: |
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          SNAP="${SNAPSHOT_PNG}"
          [ "${PUBLISH_VARIANT:-pm}" = "am" ] && SNAP="${SNAPSHOT_AM_PNG}"
          cp -f "${OUT_JSON}" "${dst}/stats.json"
          cp -f "${OUT_TEXT}" "${dst}/post_intraday.txt"
          cp -f "${SNAP}"      "${dst}/intraday.png"
          TZ=Asia/Tokyo date '+%Y/%m/%d %H:%M' > "${dst}/last_run.txt"
          ls -l "${dst}"

      - name: Commit & push site charts
        working-directory: site
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes for site."
          else
            git commit -m "Update S-COIN+ intraday ($(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi
