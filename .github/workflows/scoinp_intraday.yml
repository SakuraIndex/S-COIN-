name: "S-COIN+ • intraday + publish (JST 09:00–15:30)"

on:
  workflow_dispatch:
  schedule:
    - cron: "35 2 * * 1-5"   # JST 11:35
    - cron: "35 6 * * 1-5"   # JST 15:35

permissions:
  contents: write

concurrency:
  group: scoinp-intraday-${{ github.ref }}
  cancel-in-progress: false

env:
  INDEX_KEY: S_COIN_PLUS
  LABEL: "S-COIN+"
  CSV: docs/outputs/scoin_plus_intraday.csv
  DT_COL: "Datetime"
  BASIS_DEFAULT: prev_close
  VALUE_TYPE_DEFAULT: auto

  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/S-COIN+
  PUBLISH_TOKEN: ${{ secrets.SITE_PAT || secrets.SITE_PUBLISH_TOKEN || secrets.GITHUB_TOKEN }}

  OUT_DIR: docs/outputs
  OUT_JSON: docs/outputs/scoinp_stats.json
  OUT_TEXT: docs/outputs/scoinp_post_intraday.txt
  SNAPSHOT_PNG: docs/outputs/scoinp_intraday.png
  SNAPSHOT_AM_PNG: docs/outputs/scoinp_intraday_am.png

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          python -m pip install pandas matplotlib yfinance pytz

      - name: Skip when market closed (JST)
        run: |
          H=$(TZ=Asia/Tokyo date +%H%M)
          if [ "$H" -lt 0900 ] || [ "$H" -gt 1530 ]; then
            echo "Market closed — skip."
            exit 0
          fi

      # ===== CSV build: repo script -> strict check -> yfinance fallback =====
      - name: Build intraday CSV (prefer repo script, fallback to yfinance)
        run: |
          mkdir -p docs/outputs

          # 1) prefer repo script if exists
          if [ -f src/scoin_plus_intraday.py ]; then
            echo "Using src/scoin_plus_intraday.py"
            python src/scoin_plus_intraday.py \
              --out "docs/outputs/scoin_plus_intraday.csv" \
              --start "09:00" --end "15:30" || true
          fi

          # 2) strict check: CSV must contain "today JST" and be recent
          {
            echo "from datetime import datetime, timezone, timedelta"
            echo "import sys, pandas as pd"
            echo "jst = timezone(timedelta(hours=9))"
            echo "p = 'docs/outputs/scoin_plus_intraday.csv'"
            echo "def check(p):"
            echo "    try:"
            echo "        df = pd.read_csv(p, parse_dates=['Datetime'])"
            echo "    except Exception:"
            echo "        return False, 'read_error'"
            echo "    if df.empty: return False, 'empty'"
            echo "    # to tz-aware JST"
            echo "    try:"
            echo "        if df['Datetime'].dt.tz is None:"
            echo "            df['Datetime'] = df['Datetime'].dt.tz_localize('Asia/Tokyo', nonexistent='NaT', ambiguous='NaT')"
            echo "        df['Datetime'] = df['Datetime'].dt.tz_convert('Asia/Tokyo')"
            echo "    except Exception:"
            echo "        pass"
            echo "    today = datetime.now(jst).date()"
            echo "    df = df[df['Datetime'].dt.date == today]"
            echo "    if df.empty: return False, 'no_today_rows'"
            echo "    last = df['Datetime'].max().to_pydatetime()"
            echo "    if (datetime.now(jst) - last.astimezone(jst)).total_seconds() > 90*60:"
            echo "        return False, f'stale:{last}'"
            echo "    return True, f'rows={len(df)}, last={last}'"
            echo "ok, info = check(p)"
            echo "print('CHECK_CSV:', ok, info)"
            echo "sys.exit(0 if ok else 2)"
          } > check_csv.py

          set +e
          python check_csv.py
          NEED_FB=$?
          set -e

          # 3) fallback to yfinance if needed
          if [ "$NEED_FB" -ne 0 ]; then
            echo "Fallback: yfinance today-only strict"
            if [ ! -f tickers_scoinp.txt ]; then
              echo "ERROR: tickers_scoinp.txt missing"
              exit 2
            fi
            {
              echo "import sys, pandas as pd, datetime as dt, pytz, yfinance as yf"
              echo "csv_path = 'docs/outputs/scoin_plus_intraday.csv'"
              echo "with open('tickers_scoinp.txt') as f:"
              echo "    tickers = [t.strip() for t in f if t.strip() and not t.startswith('#')]"
              echo "jst = pytz.timezone('Asia/Tokyo')"
              echo "today = dt.datetime.now(jst).date()"
              echo "frames = []"
              echo "for t in tickers:"
              echo "    try:"
              echo "        df = yf.download(t, period='5d', interval='1m', prepost=False, auto_adjust=True, threads=False)"
              echo "    except Exception as e:"
              echo "        print('download failed', t, e); continue"
              echo "    if df is None or df.empty: continue"
              echo "    if df.index.tz is None: df.index = df.index.tz_localize('UTC')"
              echo "    df = df.tz_convert(jst)"
              echo "    df = df[df.index.date == today]"
              echo "    if df.empty: continue"
              echo "    df = df[['Close']].rename(columns={'Close': t})"
              echo "    frames.append(df)"
              echo "if not frames:"
              echo "    print('NO_TODAY_DATA'); sys.exit(2)"
              echo "px = pd.concat(frames, axis=1).sort_index().dropna(how='all')"
              echo "px['Datetime'] = px.index"
              echo "px['Index'] = px[[c for c in px.columns if c in tickers]].mean(axis=1, skipna=True)"
              echo "px[['Datetime','Index']].to_csv(csv_path, index=False)"
              echo "print('CSV written:', csv_path, 'rows=', len(px), 'first=', px.index.min(), 'last=', px.index.max())"
            } > build_csv.py
            python build_csv.py

            # re-check strictly
            python check_csv.py
          fi

      - name: Verify inputs & script
        run: |
          test -f "${CSV}" || (echo "Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || (echo "Missing script: scripts/make_intraday_post.py" && exit 1)
          mkdir -p "${OUT_DIR}"

      - name: Decide AM/PM variant
        env:
          RUN_SCHEDULE: ${{ github.event.schedule || '' }}
        run: |
          if [ "${RUN_SCHEDULE}" = "35 2 * * 1-5" ]; then
            echo "PUBLISH_VARIANT=am" >> "$GITHUB_ENV"
          else
            echo "PUBLISH_VARIANT=pm" >> "$GITHUB_ENV"
          fi

      - name: Generate intraday snapshot (with legacy fallback)
        run: |
          SNAP="${SNAPSHOT_PNG}"
          if [ "${PUBLISH_VARIANT:-pm}" = "am" ]; then SNAP="${SNAPSHOT_AM_PNG}"; fi

          echo "Try: extended CLI"
          set +e
          python scripts/make_intraday_post.py \
            --index-key "${INDEX_KEY}" \
            --csv "${CSV}" \
            --out-json "${OUT_JSON}" \
            --out-text "${OUT_TEXT}" \
            --snapshot-png "${SNAP}" \
            --session-start 09:00 \
            --session-end 15:30 \
            --day-anchor 09:00 \
            --basis prev_close \
            --label "${LABEL}" \
            --dt-col "${DT_COL}" \
            --value-type auto
          rc=$?
          set -e

          if [ $rc -ne 0 ]; then
            echo "[fallback] legacy CLI"
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
