name: "S-COIN+ • intraday + publish (JST 09:00-15:30)"

on:
  workflow_dispatch:
  schedule:
    - cron: "35 2 * * 1-5"   # JST 11:35
    - cron: "35 6 * * 1-5"   # JST 15:35

permissions:
  contents: write

concurrency:
  group: scoinp-intraday-${{ github.ref }}
  cancel-in-progress: true

env:
  INDEX_KEY: S_COIN_PLUS
  LABEL: "S-COIN+"
  CSV: docs/outputs/scoin_plus_intraday.csv
  DT_COL: "Datetime"
  BASIS_DEFAULT: prev_close
  VALUE_TYPE_DEFAULT: auto

  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/S-COIN+
  PUBLISH_TOKEN: ${{ secrets.SITE_PAT || secrets.SITE_PUBLISH_TOKEN || secrets.GITHUB_TOKEN }}

  OUT_DIR: docs/outputs
  OUT_JSON: docs/outputs/scoinp_stats.json
  OUT_TEXT: docs/outputs/scoinp_post_intraday.txt
  SNAPSHOT_PNG: docs/outputs/scoinp_intraday.png
  SNAPSHOT_AM_PNG: docs/outputs/scoinp_intraday_am.png

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas matplotlib yfinance pytz
          fi

      - name: Skip when market closed (JST)
        run: |
          H=$(TZ=Asia/Tokyo date +%H%M)
          # 09:00〜15:30 以外はスキップ
          if [ "$H" -lt 0900 ] || [ "$H" -gt 1530 ]; then
            echo "Market closed — skip."
            exit 0
          fi

      - name: Build intraday CSV (prefer repo script, optional yfinance fallback)
        run: |
          set -e
          mkdir -p docs/outputs

          # 1) repo スクリプトを最優先
          if [ -f src/scoin_plus_intraday.py ]; then
            echo "Using src/scoin_plus_intraday.py"
            python src/scoin_plus_intraday.py \
              --out "docs/outputs/scoin_plus_intraday.csv" \
              --start "09:00" --end "15:30" || true
          fi

          # 2) 当日データの有無と “古さ” を検査（90分以上古ければ再取得）
          {
            echo "from datetime import datetime, timezone, timedelta"
            echo "import sys, pandas as pd"
            echo "jst = timezone(timedelta(hours=9))"
            echo "p = 'docs/outputs/scoin_plus_intraday.csv'"
            echo "def check(p):"
            echo "    try: df = pd.read_csv(p, parse_dates=['Datetime'])"
            echo "    except Exception: return 'missing'"
            echo "    if df.empty: return 'empty'"
            echo "    try:"
            echo "        if df['Datetime'].dt.tz is None:"
            echo "            df['Datetime'] = df['Datetime'].dt.tz_localize('Asia/Tokyo', nonexistent='NaT', ambiguous='NaT')"
            echo "        df['Datetime'] = df['Datetime'].dt.tz_convert('Asia/Tokyo')"
            echo "    except Exception: pass"
            echo "    today = datetime.now(jst).date()"
            echo "    df = df[df['Datetime'].dt.date == today]"
            echo "    if df.empty: return 'no_today'"
            echo "    last = df['Datetime'].max().to_pydatetime().astimezone(jst)"
            echo "    if (datetime.now(jst) - last).total_seconds() > 90*60: return f'stale:{last.isoformat()}'"
            echo "    return 'ok'"
            echo "print(check(p))"
          } > _chk.py

          STATUS=$(python _chk.py || true)
          echo "CHECK_CSV_STATUS: ${STATUS}"

          NEED_FB=0
          case "${STATUS}" in
            missing|empty|no_today|stale:*) NEED_FB=1 ;;
          esac

          # 3) yfinance フォールバック（当日データのみ）
          if [ "${NEED_FB}" -eq 1 ]; then
            if [ -f tickers_scoinp.txt ]; then
              echo "Fallback: yfinance (today-only strict)"
              {
                echo "import sys, pandas as pd, datetime as dt, pytz, yfinance as yf"
                echo "csv_path = 'docs/outputs/scoin_plus_intraday.csv'"
                echo "with open('tickers_scoinp.txt') as f:"
                echo "    tickers = [t.strip() for t in f if t.strip() and not t.startswith('#')]"
                echo "jst = pytz.timezone('Asia/Tokyo')"
                echo "today = dt.datetime.now(jst).date()"
                echo "frames = []"
                echo "for t in tickers:"
                echo "    try:"
                echo "        df = yf.download(t, period='5d', interval='1m', prepost=False, auto_adjust=True, threads=False)"
                echo "    except Exception as e:"
                echo "        print('download failed', t, e); continue"
                echo "    if df is None or df.empty: continue"
                echo "    if df.index.tz is None: df.index = df.index.tz_localize('UTC')"
                echo "    df = df.tz_convert(jst)"
                echo "    df = df[df.index.date == today]"
                echo "    if df.empty: continue"
                echo "    df = df[['Close']].rename(columns={'Close': t})"
                echo "    frames.append(df)"
                echo "if not frames:"
                echo "    print('NO_TODAY_DATA'); sys.exit(2)"
                echo "px = pd.concat(frames, axis=1).sort_index().dropna(how='all')"
                echo "px['Datetime'] = px.index"
                echo "px['Index'] = px[[c for c in px.columns if c in tickers]].mean(axis=1, skipna=True)"
                echo "px[['Datetime','Index']].to_csv(csv_path, index=False)"
                echo "print('CSV written:', csv_path, 'rows=', len(px), 'first=', px.index.min(), 'last=', px.index.max())"
              } > build_csv.py
              python build_csv.py
            else
              echo "WARNING: tickers_scoinp.txt not found; skip yfinance fallback."
            fi
          fi

      - name: Verify inputs & script
        run: |
          test -f "${CSV}" || (echo "Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || (echo "Missing script: scripts/make_intraday_post.py" && exit 1)
          mkdir -p "${OUT_DIR}"

      - name: Decide AM/PM variant
        env:
          RUN_SCHEDULE: ${{ github.event.schedule || '' }}
        run: |
          if [ "${RUN_SCHEDULE}" = "35 2 * * 1-5" ]; then
            echo "PUBLISH_VARIANT=am" >> "$GITHUB_ENV"
          else
            echo "PUBLISH_VARIANT=pm" >> "$GITHUB_ENV"
          fi

      - name: Generate intraday snapshot (ext CLI -> legacy fallback)
        run: |
          SNAP="${SNAPSHOT_PNG}"
          if [ "${PUBLISH_VARIANT:-pm}" = "am" ]; then SNAP="${SNAPSHOT_AM_PNG}"; fi

          set +e
          python scripts/make_intraday_post.py \
            --index-key "${INDEX_KEY}" \
            --csv "${CSV}" \
            --out-json "${OUT_JSON}" \
            --out-text "${OUT_TEXT}" \
            --snapshot-png "${SNAP}" \
            --session-start 09:00 \
            --session-end 15:30 \
            --day-anchor 09:00 \
            --basis "${BASIS_DEFAULT}" \
            --label "${LABEL}" \
            --dt-col "${DT_COL}" \
            --value-type "${VALUE_TYPE_DEFAULT}"
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "[fallback] legacy CLI"
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --snapshot-png "${SNAP}" \
              --session-start 09:00 \
              --session-end 15:30 \
              --day-anchor 09:00 \
              --basis prev_close
          fi

      - name: Validate outputs (existence / size / freshness)
        run: |
          set -e
          # 存在
          test -f "${OUT_JSON}" || (echo "::error::missing ${OUT_JSON}" && exit 1)
          test -f "${OUT_TEXT}" || (echo "::error::missing ${OUT_TEXT}" && exit 1)
          if   [ -f "${SNAPSHOT_PNG}" ]; then SNAP="${SNAPSHOT_PNG}"
          elif [ -f "${SNAPSHOT_AM_PNG}" ]; then SNAP="${SNAPSHOT_AM_PNG}"
          else echo "::error::snapshot not found"; exit 1; fi

          # サイズ（1KB 未満の “No data” 画像を撥ねる）
          [ $(stat -c%s "${SNAP}") -ge 1024 ] || { echo "::error file=${SNAP}::snapshot too small"; exit 1; }
          [ $(stat -c%s "${OUT_TEXT}") -ge 30 ] || { echo "::error file=${OUT_TEXT}::text too small"; exit 1; }

          # JSON 更新確認（1時間以内の更新が目安）
          now=$(date +%s)
          mtime=$(date -r "${OUT_JSON}" +%s)
          diff=$(( now - mtime ))
          if [ $diff -gt 3600 ]; then
            echo "::warning::stats.json looks stale (${diff}s old)"
          fi

      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy into site tree
        run: |
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}" "${dst}/stats.json"
          cp -f "${OUT_TEXT}" "${dst}/post_intraday.txt"
          if   [ -f "${SNAPSHOT_PNG}"    ]; then cp -f "${SNAPSHOT_PNG}"    "${dst}/intraday.png"
          elif [ -f "${SNAPSHOT_AM_PNG}" ]; then cp -f "${SNAPSHOT_AM_PNG}" "${dst}/intraday.png"
          fi
          TZ=Asia/Tokyo date '+%Y/%m/%d %H:%M' > "${dst}/last_run.txt"
          ls -l "${dst}"

      - name: Commit & push site charts
        working-directory: site
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes for site."
          else
            git commit -m "Update S-COIN+ intraday ($(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi
